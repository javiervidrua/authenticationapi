/*
 * Authentication API
 * An authentication API implemented in Node.js
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthSignin', 'model/AuthSignup', 'model/UserEmail', 'model/UserPassword'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthSignin'), require('../model/AuthSignup'), require('../model/UserEmail'), require('../model/UserPassword'));
  } else {
    // Browser globals (root is window)
    if (!root.AuthenticationApi) {
      root.AuthenticationApi = {};
    }
    root.AuthenticationApi.AuthApi = factory(root.AuthenticationApi.ApiClient, root.AuthenticationApi.AuthSignin, root.AuthenticationApi.AuthSignup, root.AuthenticationApi.UserEmail, root.AuthenticationApi.UserPassword);
  }
}(this, function(ApiClient, AuthSignin, AuthSignup, UserEmail, UserPassword) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authRecoverpasswordPost operation.
     * @callback module:api/AuthApi~authRecoverpasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User password recovery
     * Let the user start the password recovery process
     * @param {module:model/UserEmail} email User email to send the verification link to
     * @param {module:api/AuthApi~authRecoverpasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.authRecoverpasswordPost = function(email, callback) {
      var postBody = email;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling authRecoverpasswordPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/auth/recoverpassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authSetpasswordPost operation.
     * @callback module:api/AuthApi~authSetpasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User password set
     * Let the user set the password
     * @param {Object} token Token to verify the password set of the user
     * @param {module:model/UserPassword} password New user password
     * @param {module:api/AuthApi~authSetpasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.authSetpasswordPost = function(token, password, callback) {
      var postBody = password;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling authSetpasswordPost");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authSetpasswordPost");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/auth/setpassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authSigninPost operation.
     * @callback module:api/AuthApi~authSigninPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User sign in
     * Sign the user in to the system
     * @param {module:model/AuthSignin} user Credentials to use to sign in
     * @param {module:api/AuthApi~authSigninPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.authSigninPost = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling authSigninPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/auth/signin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authSignoutPost operation.
     * @callback module:api/AuthApi~authSignoutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User sign out
     * Sign the user out of the system
     * @param {module:api/AuthApi~authSignoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.authSignoutPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/auth/signout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authSignupPost operation.
     * @callback module:api/AuthApi~authSignupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User sign up
     * Sign the user up in the system
     * @param {module:model/AuthSignup} user User data to use to sign up
     * @param {module:api/AuthApi~authSignupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.authSignupPost = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling authSignupPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/auth/signup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authSignupVerifyGet operation.
     * @callback module:api/AuthApi~authSignupVerifyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User sign up verification
     * Verify the sign up of the user in the system
     * @param {Object} token Token to verify the sign up of the user in the system
     * @param {module:api/AuthApi~authSignupVerifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.authSignupVerifyGet = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling authSignupVerifyGet");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/auth/signup/verify', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
