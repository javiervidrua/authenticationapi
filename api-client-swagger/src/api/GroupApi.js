/*
 * Authentication API
 * An authentication API implemented in Node.js
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GroupData', 'model/GroupName', 'model/GroupUsers', 'model/UserEmail', 'model/UserGroups', 'model/UserPrivileges'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GroupData'), require('../model/GroupName'), require('../model/GroupUsers'), require('../model/UserEmail'), require('../model/UserGroups'), require('../model/UserPrivileges'));
  } else {
    // Browser globals (root is window)
    if (!root.AuthenticationApi) {
      root.AuthenticationApi = {};
    }
    root.AuthenticationApi.GroupApi = factory(root.AuthenticationApi.ApiClient, root.AuthenticationApi.GroupData, root.AuthenticationApi.GroupName, root.AuthenticationApi.GroupUsers, root.AuthenticationApi.UserEmail, root.AuthenticationApi.UserGroups, root.AuthenticationApi.UserPrivileges);
  }
}(this, function(ApiClient, GroupData, GroupName, GroupUsers, UserEmail, UserGroups, UserPrivileges) {
  'use strict';

  /**
   * Group service.
   * @module api/GroupApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GroupApi. 
   * @alias module:api/GroupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the groupGet operation.
     * @callback module:api/GroupApi~groupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the user's groups
     * Let the user retrieve a list of the groups that he belongs to
     * @param {module:api/GroupApi~groupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroups}
     */
    this.groupGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroups;

      return this.apiClient.callApi(
        '/group', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupPost operation.
     * @callback module:api/GroupApi~groupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group
     * Let the user create a new group
     * @param {module:model/GroupName} group Group
     * @param {module:api/GroupApi~groupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupName}
     */
    this.groupPost = function(group, callback) {
      var postBody = group;

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling groupPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupName;

      return this.apiClient.callApi(
        '/group', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidDelete operation.
     * @callback module:api/GroupApi~groupidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the specified group
     * Let the user remove the specified group
     * @param {Object} id Id of the group to remove
     * @param {module:api/GroupApi~groupidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupName}
     */
    this.groupidDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupName;

      return this.apiClient.callApi(
        '/group/:id', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidGet operation.
     * @callback module:api/GroupApi~groupidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the information of the specified group
     * Let the user retrieve the information of the specified group
     * @param {Object} id Id of the group to retrieve the details of
     * @param {module:api/GroupApi~groupidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupData}
     */
    this.groupidGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupData;

      return this.apiClient.callApi(
        '/group/:id', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidPut operation.
     * @callback module:api/GroupApi~groupidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the specified group
     * Let the user modify the details of the specified group
     * @param {Object} id Id of the group to modify
     * @param {module:model/GroupName} group Group
     * @param {module:api/GroupApi~groupidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupName}
     */
    this.groupidPut = function(id, group, callback) {
      var postBody = group;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidPut");
      }

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling groupidPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupName;

      return this.apiClient.callApi(
        '/group/:id', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidUserDelete operation.
     * @callback module:api/GroupApi~groupidUserDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the specified user from the specified group
     * Let the user remove an user from the specified group (The user cannot remove itself if he's the only administrator of said group)
     * @param {Object} id Id of the target group
     * @param {module:model/UserEmail} user User to remove from the specified group
     * @param {module:api/GroupApi~groupidUserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupName}
     */
    this.groupidUserDelete = function(id, user, callback) {
      var postBody = user;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidUserDelete");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling groupidUserDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupName;

      return this.apiClient.callApi(
        '/group/:id/user', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidUserGet operation.
     * @callback module:api/GroupApi~groupidUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the users of the specified group
     * Let the user retrieve a list of the users of the specified group
     * @param {Object} id Id of the target group
     * @param {module:api/GroupApi~groupidUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupUsers}
     */
    this.groupidUserGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidUserGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupUsers;

      return this.apiClient.callApi(
        '/group/:id/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidUserPost operation.
     * @callback module:api/GroupApi~groupidUserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an user to the specified group
     * Let the user add another user to the specified group
     * @param {Object} id Id of the target group
     * @param {module:model/UserEmail} user User
     * @param {module:api/GroupApi~groupidUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.groupidUserPost = function(id, user, callback) {
      var postBody = user;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidUserPost");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling groupidUserPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/group/:id/user', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupidUserPut operation.
     * @callback module:api/GroupApi~groupidUserPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the privileges of the specified user in the specified group
     * Let the user modify the privileges of the specified user in the specified group
     * @param {Object} id Id of the target group
     * @param {module:model/UserPrivileges} user User
     * @param {module:api/GroupApi~groupidUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEmail}
     */
    this.groupidUserPut = function(id, user, callback) {
      var postBody = user;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupidUserPut");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling groupidUserPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserEmail;

      return this.apiClient.callApi(
        '/group/:id/user', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
